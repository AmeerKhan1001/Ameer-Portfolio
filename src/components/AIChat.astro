---
const promptFiles = await import.meta.glob('../pages/prompts/*.md', { as: 'raw' });
const aiPrompt = await promptFiles['../pages/prompts/ai-prompt.md']();
---

<div class="w-full max-w-2xl mx-auto p-4">
  <div class="form-control">
    <div class="input-group input-group-horizontal flex">
      <input
        type="text"
        id="searchInput"
        placeholder="ðŸ¤– Ask me anything about Ameer"
        class="input input-bordered flex-grow"
      />
      <button id="searchButton" class="btn btn-square">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </button>
    </div>
  </div>
  
  <div id="responseBox" class="mt-4 p-4 border rounded-lg hidden">
    <div id="loadingSpinner" class="hidden">
      <div class="flex justify-center">
        <span class="loading loading-spinner loading-md"></span>
      </div>
    </div>
    <div id="responseContent" class="prose"></div>
  </div>
</div>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.8/purify.min.js"></script>
<script type="module" define:vars={{ aiPrompt }}>
  const searchInput = document.getElementById('searchInput');
  const searchButton = document.getElementById('searchButton');
  const responseBox = document.getElementById('responseBox');
  const loadingSpinner = document.getElementById('loadingSpinner');
  const responseContent = document.getElementById('responseContent');

  async function performSearch() {
    const query = searchInput.value.trim();
    if (!query) return;

    responseBox.classList.remove('hidden');
    loadingSpinner.classList.remove('hidden');
    responseContent.innerHTML = '';

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query,
          prompt: aiPrompt
        })
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);
      
      const result = data.result;
      
      // Convert markdown-like text to HTML (basic conversion)
      const htmlContent = result
        .replace(/\n\n/g, '</p><p>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/`(.*?)`/g, '<code>$1</code>')
        .replace(/^# (.*$)/gm, '<h1>$1</h1>')
        .replace(/^## (.*$)/gm, '<h2>$1</h2>')
        .replace(/^### (.*$)/gm, '<h3>$1</h3>');
      
      // Sanitize the HTML content
      const cleanHtml = DOMPurify.sanitize('<p>' + htmlContent + '</p>', {
        ALLOWED_TAGS: ['p', 'strong', 'em', 'code', 'h1', 'h2', 'h3', 'ul', 'ol', 'li', 'a'],
        ALLOWED_ATTR: ['href']
      });
      
      responseContent.innerHTML = cleanHtml;
    } catch (error) {
      responseContent.textContent = 'An error occurred while fetching the response.';
    } finally {
      loadingSpinner.classList.add('hidden');
    }
  }

  searchButton.addEventListener('click', performSearch);
  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      performSearch();
    }
  });
</script>
